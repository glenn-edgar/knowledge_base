// test_driver.zig - Test driver for kb_memory_driver static library

const std = @import("std");
const print = std.debug.print;

// Import the kb_memory_driver library
const kb_lib = @import("kb_memory_driver");

// Import specific types for convenience
const BasicConstructDB = kb_lib.BasicConstructDB;
const ConstructMemDB = kb_lib.ConstructMemDB;
const SearchMemDB = kb_lib.SearchMemDB;

pub fn main() !void {
    var gpa = std.heap.GeneralPurposeAllocator(.{}){};
    defer _ = gpa.deinit();
    const allocator = gpa.allocator();

    print("=== KB Memory Driver Test Suite ===\n",.{});
    print("Library: {s} v{}\n", .{ kb_lib.lib_name, kb_lib.version });
    print("Testing the static library...\n\n",.{});

    // Test 1: Library information
    try testLibraryInfo(allocator);
    
    // Test 2: Module availability  
    try testModuleAvailability();
    
    // Add more specific tests based on your actual module implementations
    //try testBasicConstructDB(allocator);
    //try testConstructMemDB(allocator);
    //try testSearchMemDB(allocator);

    print("\n=== All tests completed successfully! ===\n",.{});
}

fn testLibraryInfo(allocator: std.mem.Allocator) !void {
    print("1. Testing Library Information...\n",.{});
    
    const version_str = try kb_lib.getVersionString(allocator);
    defer allocator.free(version_str);
    
    print("  ✓ Library name: {s}\n", .{kb_lib.lib_name});
    print("  ✓ Version: {s}\n", .{version_str});
    print("  ✓ Description: {s}\n", .{kb_lib.lib_description});
    
    print("  Library info tests passed!\n\n",.{});
}

fn testModuleAvailability() !void {
    print("2. Testing Module Availability...\n",.{});
    
    // Test that we can access all the main types
    _ = BasicConstructDB;
    _ = ConstructMemDB; 
    _ = SearchMemDB;
    
    print("  ✓ BasicConstructDB type available\n",.{});
    print("  ✓ ConstructMemDB type available\n",.{});
    print("  ✓ SearchMemDB type available\n",.{});
    
    print("  Module availability tests passed!\n\n",.{});
}

// Uncomment and implement these functions based on your actual module APIs

fn testBasicConstructDB(allocator: std.mem.Allocator) !void {
    print("3. Testing BasicConstructDB...\n",.{});
    
    // Example usage - adjust based on your actual API
    var db = try BasicConstructDB.init(
        allocator,
        "localhost",
        5432,
        "test_db",
        "test_user", 
        "test_password",
        "test_table"
    );
    defer db.deinit();
    
    print("  ✓ BasicConstructDB initialized\n",.{});
    print("  BasicConstructDB tests passed!\n\n",.{});
}

fn testConstructMemDB(allocator: std.mem.Allocator) !void {
    print("4. Testing ConstructMemDB...\n",.{});
    
    // Example usage - adjust based on your actual API
    var cmdb = try ConstructMemDB.init(
        allocator,
        "localhost",
        5432,
        "test_db",
        "test_user",
        "test_password", 
        "test_table"
    );
    defer cmdb.deinit();
    
    print("  ✓ ConstructMemDB initialized\n",.{});
    print("  ConstructMemDB tests passed!\n\n",.{});
}

fn testSearchMemDB(allocator: std.mem.Allocator) !void {
    print("5. Testing SearchMemDB...\n",.{});
    
    // Example usage - adjust based on your actual API
    var smdb = try SearchMemDB.init(
        allocator,
        "localhost",
        5432,
        "test_db",
        "test_user",
        "test_password",
        "test_table"
    );
    defer smdb.deinit();
    
    print("  ✓ SearchMemDB initialized\n",.{});
    print("  SearchMemDB tests passed!\n\n",.{});
}


// Test that verifies the library can be imported correctly
test "library import test" {
    // Test that we can import and access all library components
    _ = kb_lib.BasicConstructDB;
    _ = kb_lib.ConstructMemDB;
    _ = kb_lib.SearchMemDB;
    _ = kb_lib.version;
    _ = kb_lib.lib_name;
}

